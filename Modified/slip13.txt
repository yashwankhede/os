Q1.

#include <stdio.h>

int main() {
  int allocation[5][4], max[5][4], need[5][4], available[4];
  int work[4], finish[5], safeSequence[5];
  int nProcesses, nResources, i, j, k;

  // Accept allocation and max from user
  printf("Enter number of processes: ");
  scanf("%d", &nProcesses);
  printf("Enter number of resources: ");
  scanf("%d", &nResources);

  for (i = 0; i < nProcesses; i++) {
    printf("Enter allocation for process %d: ", i);
    for (j = 0; j < nResources; j++) {
      scanf("%d", &allocation[i][j]);
    }
  }

  for (i = 0; i < nProcesses; i++) {
    printf("Enter max for process %d: ", i);
    for (j = 0; j < nResources; j++) {
      scanf("%d", &max[i][j]);
      need[i][j] = max[i][j] - allocation[i][j];
    }
  }

  // Accept available resources from user
  printf("Enter available resources: ");
  for (i = 0; i < nResources; i++) {
    scanf("%d", &available[i]);
  }

  // Initialize finish array and work array
  for (i = 0; i < nProcesses; i++) {
    finish[i] = 0;
  }
  for (i = 0; i < nResources; i++) {
    work[i] = available[i];
  }

  // Find safe sequence
  int count = 0;
  while (count < nProcesses) {
    int found = 0;
    for (i = 0; i < nProcesses; i++) {
      if (finish[i] == 0) {
        int safe = 1;
        for (j = 0; j < nResources; j++) {
          if (need[i][j] > work[j]) {
            safe = 0;
            break;
          }
        }
        if (safe) {
          for (j = 0; j < nResources; j++) {
            work[j] += allocation[i][j];
          }
          safeSequence[count++] = i;
          finish[i] = 1;
          found = 1;
        }
      }
    }
    if (!found) {
      printf("System is not in safe state.\n");
      return 0;
    }
  }

  // Print need matrix and safe sequence
  printf("Need matrix:\n");
  for (i = 0; i < nProcesses; i++) {
    for (j = 0; j < nResources; j++) {
      printf("%d ", need[i][j]);
    }
    printf("\n");
  }
  printf("System is in safe state.\nSafe sequence: ");
  for (i = 0; i < nProcesses; i++) {
    printf("%d ", safeSequence[i]);
  }
  printf("\n");

  return 0;
}

/*OUPUT

Enter number of processes: 5
Enter number of resources: 3
Enter allocation for process 0: 0 1 0
Enter allocation for process 1: 2 0 0 
Enter allocation for process 2: 3 0 3
Enter allocation for process 3: 2 1 1
Enter allocation for process 4: 0 0 2
Enter max for process 0: 0 0 0
Enter max for process 1: 2 0 2
Enter max for process 2: 0 0 0
Enter max for process 3: 1 0 0
Enter max for process 4: 0 0 2
Enter available resources: 0 0 0
Need matrix:
0 -1 0 
0 0 2 
-3 0 -3 
-1 -1 -1 
0 0 0 
System is in safe state.
Safe sequence: 0 2 3 4 1 

*/

-------------------------------------------
Q2.

#include <stdio.h>
#include <stdlib.h>

// function to sort disk requests in ascending order
void sort(int arr[], int n)
{
    int temp, i, j;
    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (arr[i] > arr[j]) {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

int main()
{
    int n, head, i, j, pos = 0, head_movement = 0;
    int *requests;
    char dir;

    // accept inputs from the user
    printf("Enter total number of disk blocks: ");
    scanf("%d", &n);

    requests = (int*) malloc(n * sizeof(int));

    printf("Enter the disk request string:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the starting head position: ");
    scanf("%d", &head);

    printf("Enter the direction (L/R): ");
    scanf(" %c", &dir);

    // sort requests in ascending order
    sort(requests, n);

    // find position of head in the requests
    for (i = 0; i < n; i++) {
        if (head == requests[i]) {
            pos = i;
            break;
        }
    }

    printf("Order in which requests are serviced:\n");

    if (dir == 'L') {
        // handle left direction
        for (i = pos; i >= 0; i--) {
            printf("%d ", requests[i]);
            head_movement += abs(requests[i] - head);
            head = requests[i];
        }
        head_movement += head; // add the head movement to the starting position
        head = 0;

        for (i = pos + 1; i < n; i++) {
            printf("%d ", requests[i]);
            head_movement += abs(requests[i] - head);
            head = requests[i];
        }
    } else {
        // handle right direction
        for (i = pos; i < n; i++) {
            printf("%d ", requests[i]);
            head_movement += abs(requests[i] - head);
            head = requests[i];
        }
        head_movement += (n - head - 1); // add the head movement to the end of the disk
        head = n - 1;

        for (i = pos - 1; i >= 0; i--) {
            printf("%d ", requests[i]);
            head_movement += abs(requests[i] - head);
            head = requests[i];
        }
    }

    printf("\nTotal head movements: %d\n", head_movement);

    free(requests);

    return 0;
}

/*OUTOUT

Enter total number of disk blocks: 8
Enter the disk request string:
176 79 34 60 92 11 41 114
Enter the starting head position: 65
Enter the direction (L/R): L
Order in which requests are serviced:
11 34 41 60 79 92 114 176 
Total head movements: 241

*/
	
			
	

