Q1. 

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ARRAY_SIZE 1000

int main(int argc, char** argv) {
    int rank, size, i;
    double sum = 0.0, avg = 0.0;
    double array[ARRAY_SIZE];

    // Initialize MPI environment
    MPI_Init(&argc, &argv);

    // Get rank and size of current process
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Generate random numbers on root process
    if (rank == 0) {
        for (i = 0; i < ARRAY_SIZE; i++) {
            array[i] = (double)rand() / RAND_MAX;
        }
    }

    // Scatter the array to all processes
    MPI_Scatter(array, ARRAY_SIZE/size, MPI_DOUBLE, array, ARRAY_SIZE/size, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Compute partial sum on each process
    double partial_sum = 0.0;
    for (i = 0; i < ARRAY_SIZE/size; i++) {
        partial_sum += array[i];
    }

    // Reduce partial sums to get global sum on root process
    MPI_Reduce(&partial_sum, &sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    // Compute average on root process
    if (rank == 0) {
        avg = sum / ARRAY_SIZE;
        printf("Sum: %lf\n", sum);
        printf("Average: %lf\n", avg);
    }

    // Finalize MPI environment
    MPI_Finalize();

    return 0;
}


------------------------
Q2.

#include<stdio.h>
#include<stdlib.h>
int main()
{
  int RQ[100],i,j,n,thm=0,initial,size,move;
  printf("Enter number of request\n");
  scanf("%d",&n);
  printf("Enter the request sequence\n");
  for(i=0;i<n;i++)
  {
      scanf("%d",&RQ[i]);
  }
  printf("Enter initial head position\n");
  scanf("%d",&initial);
  printf("Enter total disk size\n");
  scanf("%d",&size);
  printf("Enter the head moment direction for high 1 and for low 0\n");
  scanf("%d",&move);
  for(i=0;i<n;i++)
  {
     for(j=0;j<n-i-1;j++)
     {
        if(RQ[j]>RQ[j+1])
        {
           int temp;
           temp=RQ[j];
           RQ[j]=RQ[j+1];
           RQ[j+1]=temp;
        }
     }
  }
  int index;
  for(i=0;i<n;i++)
  {
     if(initial<RQ[i])
     {
        index=i;
        break;
     }
  }
  if(move==1)
  {
     for(i=index;i<n;i++)
     {
        thm=thm+abs(RQ[i]-initial);
        initial=RQ[i];
     }
     thm=thm+abs(RQ[i]-initial);
     
     initial=0;
     for(i=0;i<index;i++)
     {
        thm=thm+abs(RQ[i]-initial);
        initial=RQ[i];
     }
  }
  else
  {
     for(i=index-1;i>=0;i--)
     {
        thm=thm+abs(RQ[i]-initial);
        initial=RQ[i];
     }
     thm=thm+abs(RQ[i+1]-0);
     
     for(i=n-1;i>=index;i--)
     {
        thm=thm+abs(RQ[i]-initial);
        initial=RQ[i];
     }
  }
  printf("Total head moment=%d",thm-size);
  
}