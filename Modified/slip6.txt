Q1.

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_BLOCKS 100

bool allocated[MAX_BLOCKS] = {false};
int directory[MAX_BLOCKS] = {0};

int get_free_block() {
    for (int i = 0; i < MAX_BLOCKS; i++) {
        if (!allocated[i]) {
            allocated[i] = true;
            return i;
        }
    }
    return -1;
}

void show_bit_vector(int num_blocks) {
    printf("Bit Vector:\n");
    for (int i = 0; i < num_blocks; i++) {
        printf("%d ", allocated[i]);
    }
    printf("\n");
}

void create_new_file(int num_blocks) {
    int starting_block = get_free_block();
    if (starting_block == -1) {
        printf("Error: Disk is full\n");
        return;
    }
    int current_block = starting_block;
    int num_allocated = 1;
    while (num_allocated < num_blocks) {
        int next_block = get_free_block();
        if (next_block == -1) {
            printf("Error: Disk is full\n");
            allocated[current_block] = false;
            return;
        }
        directory[current_block] = next_block;
        current_block = next_block;
        num_allocated++;
    }
    printf("File created starting at block %d\n", starting_block);
}

void show_directory(int num_blocks) {
    printf("Directory:\n");
    for (int i = 0; i < num_blocks; i++) {
        printf("%d ", directory[i]);
    }
    printf("\n");
}

int main() {
    int num_blocks, choice;
    printf("Enter number of blocks: ");
    scanf("%d", &num_blocks);

    while (true) {
        printf("Menu:\n");
        printf("1. Show bit vector\n");
        printf("2. Create new file\n");
        printf("3. Show directory\n");
        printf("4. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                show_bit_vector(num_blocks);
                break;
            case 2: {
                int num_file_blocks;
                printf("Enter number of blocks for new file: ");
                scanf("%d", &num_file_blocks);
                create_new_file(num_file_blocks);
                break;
            }
            case 3:
                show_directory(num_blocks);
                break;
            case 4:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}


------------------------
Q2.

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, i, j, head, sum = 0;
    printf("Enter the total number of disk blocks: ");
    scanf("%d", &n);
    int *arr = (int*)malloc(n * sizeof(int));
    printf("Enter the disk request string:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
        if (arr[i] == -1) {
            n = i;
            break;
        }
    }
    printf("Enter the starting head position: ");
    scanf("%d", &head);

    // Sort the disk request string in ascending order
    for (i = 0; i < n-1; i++) {
        for (j = i+1; j < n; j++) {
            if (arr[i] > arr[j]) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }

    printf("\nC-SCAN Disk Scheduling Algorithm (Right Direction)\n");
    printf("--------------------------------------------------\n");

    printf("Sequence: %d", head);
    if (head > arr[0]) {
        sum += head - arr[0];
        printf(" -> %d", arr[0]);
    }
    for (i = 1; i < n; i++) {
        if (arr[i] >= head) {
            sum += arr[i] - head;
            head = arr[i];
            printf(" -> %d", head);
        }
    }
    if (head < n-1) {
        sum += n - 1 - head;
        printf(" -> %d", n-1);
    }
    printf("\n");
    printf("Total head movements: %d\n", sum);

    free(arr);
    return 0;
}

/*OUTPUT

Enter the total number of disk blocks: 7
Enter the disk request string:
80
150
60
135
40
35
170
Enter the starting head position: 70

C-SCAN Disk Scheduling Algorithm (Right Direction)
--------------------------------------------------
Sequence: 70 -> 35 -> 80 -> 135 -> 150 -> 170
Total head movements: 135

*/