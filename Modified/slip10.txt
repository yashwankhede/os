Q1. 

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ARRAY_SIZE 1000

int main(int argc, char** argv) {
    int rank, size, i;
    double sum = 0.0, avg = 0.0;
    double array[ARRAY_SIZE];

    // Initialize MPI environment
    MPI_Init(&argc, &argv);

    // Get rank and size of current process
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Generate random numbers on root process
    if (rank == 0) {
        for (i = 0; i < ARRAY_SIZE; i++) {
            array[i] = (double)rand() / RAND_MAX;
        }
    }

    // Scatter the array to all processes
    MPI_Scatter(array, ARRAY_SIZE/size, MPI_DOUBLE, array, ARRAY_SIZE/size, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Compute partial sum on each process
    double partial_sum = 0.0;
    for (i = 0; i < ARRAY_SIZE/size; i++) {
        partial_sum += array[i];
    }

    // Reduce partial sums to get global sum on root process
    MPI_Reduce(&partial_sum, &sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    // Compute average on root process
    if (rank == 0) {
        avg = sum / ARRAY_SIZE;
        printf("Sum: %lf\n", sum);
        printf("Average: %lf\n", avg);
    }

    // Finalize MPI environment
    MPI_Finalize();

    return 0;
}


------------------------
Q2.

#include <stdio.h>
#include <stdlib.h>

void sort(int *arr, int size)
{
    int i, j, temp;
    for (i = 0; i < size - 1; i++)
    {
        for (j = i + 1; j < size; j++)
        {
            if (arr[i] > arr[j])
            {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

int main()
{
    int n, head, i, j, temp, total_head_movement = 0;
    printf("Enter the total number of disk blocks: ");
    scanf("%d", &n);
    int *requests = (int *)malloc(n * sizeof(int));
    printf("Enter the disk request string: ");
    for (i = 0; i < n; i++)
        scanf("%d", &requests[i]);
    printf("Enter the current head position: ");
    scanf("%d", &head);
    sort(requests, n);
    printf("Order of request service: ");
    if (head > requests[0])
    {
        for (i = head; i >= 0; i--)
        {
            for (j = 0; j < n; j++)
            {
                if (requests[j] == i)
                {
                    printf("%d ", i);
                    total_head_movement += abs(i - head);
                    head = i;
                }
            }
        }
        total_head_movement += abs(0 - head);
        head = 0;
        for (i = n - 1; i >= 0; i--)
        {
            if (requests[i] >= head)
            {
                printf("%d ", requests[i]);
                total_head_movement += abs(requests[i] - head);
                head = requests[i];
            }
        }
    }
    else
    {
        for (i = head; i >= 0; i--)
        {
            for (j = n - 1; j >= 0; j--)
            {
                if (requests[j] == i)
                {
                    printf("%d ", i);
                    total_head_movement += abs(i - head);
                    head = i;
                }
            }
        }
        total_head_movement += abs(0 - head);
        head = n - 1;
        for (i = 0; i < n; i++)
        {
            if (requests[i] <= head)
            {
                printf("%d ", requests[i]);
                total_head_movement += abs(requests[i] - head);
                head = requests[i];
            }
        }
    }
    printf("\nTotal head movement: %d\n", total_head_movement);
    free(requests);
    return 0;
}

/*OUTPUT

Enter the total number of disk blocks: 8
Enter the disk request string: 33 99 142 52 197 79 46 65
Enter the current head position: 72
Order of request service: 65 52 46 33 79 99 142 197 
Total head movement: 212

*/