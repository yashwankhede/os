Q1.

#include <stdio.h>

int main() {
  int allocation[5][4], max[5][4], need[5][4], available[4];
  int work[4], finish[5], safeSequence[5];
  int nProcesses, nResources, i, j, k;

  // Accept allocation and max from user
  printf("Enter number of processes: ");
  scanf("%d", &nProcesses);
  printf("Enter number of resources: ");
  scanf("%d", &nResources);

  for (i = 0; i < nProcesses; i++) {
    printf("Enter allocation for process %d: ", i);
    for (j = 0; j < nResources; j++) {
      scanf("%d", &allocation[i][j]);
    }
  }

  for (i = 0; i < nProcesses; i++) {
    printf("Enter max for process %d: ", i);
    for (j = 0; j < nResources; j++) {
      scanf("%d", &max[i][j]);
      need[i][j] = max[i][j] - allocation[i][j];
    }
  }

  // Accept available resources from user
  printf("Enter available resources: ");
  for (i = 0; i < nResources; i++) {
    scanf("%d", &available[i]);
  }

  // Initialize finish array and work array
  for (i = 0; i < nProcesses; i++) {
    finish[i] = 0;
  }
  for (i = 0; i < nResources; i++) {
    work[i] = available[i];
  }

  // Find safe sequence
  int count = 0;
  while (count < nProcesses) {
    int found = 0;
    for (i = 0; i < nProcesses; i++) {
      if (finish[i] == 0) {
        int safe = 1;
        for (j = 0; j < nResources; j++) {
          if (need[i][j] > work[j]) {
            safe = 0;
            break;
          }
        }
        if (safe) {
          for (j = 0; j < nResources; j++) {
            work[j] += allocation[i][j];
          }
          safeSequence[count++] = i;
          finish[i] = 1;
          found = 1;
        }
      }
    }
    if (!found) {
      printf("System is not in safe state.\n");
      return 0;
    }
  }

  // Print need matrix and safe sequence
  printf("Need matrix:\n");
  for (i = 0; i < nProcesses; i++) {
    for (j = 0; j < nResources; j++) {
      printf("%d ", need[i][j]);
    }
    printf("\n");
  }
  printf("System is in safe state.\nSafe sequence: ");
  for (i = 0; i < nProcesses; i++) {
    printf("%d ", safeSequence[i]);
  }
  printf("\n");

  return 0;
}

/* OUTPUT
Enter number of processes: 5
Enter number of resources: 4
Enter allocation for process 0: 0 0 1 2 
Enter allocation for process 1: 1 0 0 0 
Enter allocation for process 2: 1 3 5 4
Enter allocation for process 3: 0 6 3 2
Enter allocation for process 4: 0 0 1 4
Enter max for process 0: 0 0 1 2
Enter max for process 1: 1 7 5 0
Enter max for process 2: 2 3 5 6
Enter max for process 3: 0 6 5 2
Enter max for process 4: 0 6 5 6
Enter available resources: 1 5 2 0
Need matrix:
0 0 0 0 
0 7 5 0 
1 0 0 2 
0 0 2 0 
0 6 4 2 
System is in safe state.
Safe sequence: 0 2 3 4 1 
*/

////slip3 Q2/////


#include<stdio.h>
#include<stdlib.h>
#include<mpi.h>
#include<assert.h>
#include<time.h>

float *create_rand_nums(int num_elements)
{
	float *rand_nums=(float *)malloc(sizeof(float)*num_elements);
	assert(rand_nums !=NULL);
	int i;
	for(i=0;i<num_elements;i++)
		{
			rand_nums[i]=(rand()/(float)RAND_MAX);
		}
		return rand_nums;
}

int main(int argc, char**argv)
{
	if(argc!=2)
	{
		fprintf(stderr,"usage:avg num_elements_per_proc\n");
		exit(1);
	}
	int num_elements_per_proc=atoi(argv[1]);
	MPI_Init(NULL,NULL);
	int world_rank;
	MPI_Comm_rank(MPI_COMM_WORLD,&world_rank);
	int world_size;
	MPI_Comm_size(MPI_COMM_WORLD,&world_size);
	
	srand(time(NULL)*world_rank);
	float *rand_nums=NULL;
	rand_nums=create_rand_nums(num_elements_per_proc);
	
	float max=0;
	int k;
	for(k=0;k<num_elements_per_proc;k++)
	{
		if(rand_nums[k]>max);
		{
			max=rand_nums[k];
		}
	}
	float global_max;
	MPI_Reduce(&max,&global_max,1,MPI_FLOAT,MPI_MAX,0,MPI_COMM_WORLD);
	float min=999;
	int z;
	for(z=0;z<num_elements_per_proc;z++)
	{
		if(rand_nums[z]<min)
		{
			min=rand_nums[z];
		}
	}
	float global_min;
	MPI_Reduce(&min,&global_min,1,MPI_FLOAT,MPI_MIN,0,MPI_COMM_WORLD);
	if(world_rank==0)
	{
		printf("max is %f\n",global_max);
		printf("min is %f\n",global_min);
	}
		free(rand_nums);
		MPI_Barrier(MPI_COMM_WORLD);
		MPI_Finalize();
}