Q1. 

#include <stdio.h>

int main() {
  int allocation[5][4], max[5][4], need[5][4], available[4];
  int work[4], finish[5], safeSequence[5];
  int nProcesses, nResources, i, j, k;

  // Accept allocation and max from user
  printf("Enter number of processes: ");
  scanf("%d", &nProcesses);
  printf("Enter number of resources: ");
  scanf("%d", &nResources);

  for (i = 0; i < nProcesses; i++) {
    printf("Enter allocation for process %d: ", i);
    for (j = 0; j < nResources; j++) {
      scanf("%d", &allocation[i][j]);
    }
  }

  for (i = 0; i < nProcesses; i++) {
    printf("Enter max for process %d: ", i);
    for (j = 0; j < nResources; j++) {
      scanf("%d", &max[i][j]);
      need[i][j] = max[i][j] - allocation[i][j];
    }
  }

  // Accept available resources from user
  printf("Enter available resources: ");
  for (i = 0; i < nResources; i++) {
    scanf("%d", &available[i]);
  }

  // Initialize finish array and work array
  for (i = 0; i < nProcesses; i++) {
    finish[i] = 0;
  }
  for (i = 0; i < nResources; i++) {
    work[i] = available[i];
  }

  // Find safe sequence
  int count = 0;
  while (count < nProcesses) {
    int found = 0;
    for (i = 0; i < nProcesses; i++) {
      if (finish[i] == 0) {
        int safe = 1;
        for (j = 0; j < nResources; j++) {
          if (need[i][j] > work[j]) {
            safe = 0;
            break;
          }
        }
        if (safe) {
          for (j = 0; j < nResources; j++) {
            work[j] += allocation[i][j];
          }
          safeSequence[count++] = i;
          finish[i] = 1;
          found = 1;
        }
      }
    }
    if (!found) {
      printf("System is not in safe state.\n");
      return 0;
    }
  }

  // Print need matrix and safe sequence
  printf("Need matrix:\n");
  for (i = 0; i < nProcesses; i++) {
    for (j = 0; j < nResources; j++) {
      printf("%d ", need[i][j]);
    }
    printf("\n");
  }
  printf("System is in safe state.\nSafe sequence: ");
  for (i = 0; i < nProcesses; i++) {
    printf("%d ", safeSequence[i]);
  }
  printf("\n");

  return 0;
}

------------------------
Q2.

#include <stdio.h>
#include <stdlib.h>

void sort(int *arr, int size)
{
    int i, j, temp;
    for (i = 0; i < size - 1; i++)
    {
        for (j = i + 1; j < size; j++)
        {
            if (arr[i] > arr[j])
            {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

int main()
{
    int n, head, i, j, temp, total_head_movement = 0;
    printf("Enter the total number of disk blocks: ");
    scanf("%d", &n);
    int *requests = (int *)malloc(n * sizeof(int));
    printf("Enter the disk request string: ");
    for (i = 0; i < n; i++)
        scanf("%d", &requests[i]);
    printf("Enter the current head position: ");
    scanf("%d", &head);
    sort(requests, n);
    printf("Order of request service: ");
    if (head > requests[0])
    {
        for (i = head; i >= 0; i--)
        {
            for (j = 0; j < n; j++)
            {
                if (requests[j] == i)
                {
                    printf("%d ", i);
                    total_head_movement += abs(i - head);
                    head = i;
                }
            }
        }
        total_head_movement += abs(0 - head);
        head = 0;
        for (i = n - 1; i >= 0; i--)
        {
            if (requests[i] >= head)
            {
                printf("%d ", requests[i]);
                total_head_movement += abs(requests[i] - head);
                head = requests[i];
            }
        }
    }
    else
    {
        for (i = head; i >= 0; i--)
        {
            for (j = n - 1; j >= 0; j--)
            {
                if (requests[j] == i)
                {
                    printf("%d ", i);
                    total_head_movement += abs(i - head);
                    head = i;
                }
            }
        }
        total_head_movement += abs(0 - head);
        head = n - 1;
        for (i = 0; i < n; i++)
        {
            if (requests[i] <= head)
            {
                printf("%d ", requests[i]);
                total_head_movement += abs(requests[i] - head);
                head = requests[i];
            }
        }
    }
    printf("\nTotal head movement: %d\n", total_head_movement);
    free(requests);
    return 0;
}

/*OUTPUT

Enter the total number of disk blocks: 8
Enter the disk request string: 33 99 142 52 197 79 46 65
Enter the current head position: 72
Order of request service: 65 52 46 33 79 99 142 197 
Total head movement: 212

*/