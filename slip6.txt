Q1.

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_BLOCKS 100

bool allocated[MAX_BLOCKS] = {false};
int directory[MAX_BLOCKS] = {0};

int get_free_block() {
    for (int i = 0; i < MAX_BLOCKS; i++) {
        if (!allocated[i]) {
            allocated[i] = true;
            return i;
        }
    }
    return -1;
}

void show_bit_vector(int num_blocks) {
    printf("Bit Vector:\n");
    for (int i = 0; i < num_blocks; i++) {
        printf("%d ", allocated[i]);
    }
    printf("\n");
}

void create_new_file(int num_blocks) {
    int starting_block = get_free_block();
    if (starting_block == -1) {
        printf("Error: Disk is full\n");
        return;
    }
    int current_block = starting_block;
    int num_allocated = 1;
    while (num_allocated < num_blocks) {
        int next_block = get_free_block();
        if (next_block == -1) {
            printf("Error: Disk is full\n");
            allocated[current_block] = false;
            return;
        }
        directory[current_block] = next_block;
        current_block = next_block;
        num_allocated++;
    }
    printf("File created starting at block %d\n", starting_block);
}

void show_directory(int num_blocks) {
    printf("Directory:\n");
    for (int i = 0; i < num_blocks; i++) {
        printf("%d ", directory[i]);
    }
    printf("\n");
}

int main() {
    int num_blocks, choice;
    printf("Enter number of blocks: ");
    scanf("%d", &num_blocks);

    while (true) {
        printf("Menu:\n");
        printf("1. Show bit vector\n");
        printf("2. Create new file\n");
        printf("3. Show directory\n");
        printf("4. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                show_bit_vector(num_blocks);
                break;
            case 2: {
                int num_file_blocks;
                printf("Enter number of blocks for new file: ");
                scanf("%d", &num_file_blocks);
                create_new_file(num_file_blocks);
                break;
            }
            case 3:
                show_directory(num_blocks);
                break;
            case 4:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}


------------------------
Q2.

#include<stdio.h>
#include<stdlib.h>
int main()
{
  int RQ[100],i,j,n,thm=0,initial,size,move;
  printf("Enter number of request\n");
  scanf("%d",&n);
  printf("Enter the request sequence\n");
  for(i=0;i<n;i++)
  {
      scanf("%d",&RQ[i]);
  }
  printf("Enter initial head position\n");
  scanf("%d",&initial);
  printf("Enter total disk size\n");
  scanf("%d",&size);
  printf("Enter the head moment direction for high 1 and for low 0\n");
  scanf("%d",&move);
  for(i=0;i<n;i++)
  {
     for(j=0;j<n-i-1;j++)
     {
        if(RQ[j]>RQ[j+1])
        {
           int temp;
           temp=RQ[j];
           RQ[j]=RQ[j+1];
           RQ[j+1]=temp;
        }
     }
  }
  int index;
  for(i=0;i<n;i++)
  {
     if(initial<RQ[i])
     {
        index=i;
        break;
     }
  }
  if(move==1)
  {
     for(i=index;i<n;i++)
     {
        thm=thm+abs(RQ[i]-initial);
        initial=RQ[i];
     }
     thm=thm+abs(RQ[i]-initial);
     
     initial=0;
     for(i=0;i<index;i++)
     {
        thm=thm+abs(RQ[i]-initial);
        initial=RQ[i];
     }
  }
  else
  {
     for(i=index-1;i>=0;i--)
     {
        thm=thm+abs(RQ[i]-initial);
        initial=RQ[i];
     }
     thm=thm+abs(RQ[i+1]-0);
     
     for(i=n-1;i>=index;i--)
     {
        thm=thm+abs(RQ[i]-initial);
        initial=RQ[i];
     }
  }
  printf("Total head moment=%d",thm-size);
  
}